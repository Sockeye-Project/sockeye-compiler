/*
 * Copyright (c) 2017, ETH Zurich.
 * All rights reserved.
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr. 6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY SOCKEYE: DO NOT EDIT!
 */

#include <stdint.h>
#include <barrelfish_kpi/paging_arch.h>
#include <barrelfish_kpi/types.h>

#include <device_mapping.h>

#define L1_TABLE_INDEX(va) ARMV7_L1_OFFSET(va)

/**
 * /brief An L1 page table entry to map a 1MB 'section' of
 * device memory located at physical address 'pa'.
 */
#define L1_DEVICE_ENTRY(pa)                             \
{                                                       \
    .raw = 0,                                           \
    .section.type = ARMV7_L1_TYPE_SECTION_ENTRY,              \
    .section.bufferable   = 0,                          \
    .section.cacheable    = 0,                          \
    .section.ap10         = 3,                          \
    .section.ap2          = 0,                          \
    .section.base_address = ARMV7_L1_SECTION_NUMBER(pa)   \
}

/**
 * /brief An L1 page table entry to map a 1MB 'section' of RAM
 * located at physical address 'pa'.
 */
#define L1_MEMORY_ENTRY(pa)                             \
{                                                       \
    .raw = 0,                                           \
    .section.type = ARMV7_L1_TYPE_SECTION_ENTRY,              \
    .section.tex           = 1,                         \
    .section.cacheable     = 1,                         \
    .section.bufferable    = 1,                         \
    .section.execute_never = 0,                         \
    .section.not_global    = 0,                         \
    .section.shareable     = 1,                         \
    .section.ap10          = 1,                         \
    .section.ap2           = 0,                         \
    .section.base_address  = ARMV7_L1_SECTION_NUMBER(pa)  \
}



union armv7_l1_entry l1_table[ARMV7_L1_MAX_ENTRIES]
    __attribute__((aligned(ARMV7_L1_ALIGN), section(".pagetables.L1"))) =
{
	%s
};

union armv7_l2_entry l2_vec[ARMV7_L2_MAX_ENTRIES]
    __attribute__((aligned(ARMV7_L2_ALIGN), section(".pagetables.L2")));

extern uint64_t __pagetables_start;
extern uint64_t __pagetables_end;

void *foo = &__pagetables_start;

struct device_mappings device_mappings
__attribute__((aligned(ARMV7_L1_ALIGN), section(".devmappings.maps"))) =
{
    .magic = DEVICE_MAPPINGS_MAGIC,
    .count = %u,
    .ptflags = 0x0,
    .ptroot = (uintptr_t)&__pagetables_start,
    .ptend =  (uintptr_t)&__pagetables_end,
    .mappings = {
        %s
        DEVICE_MAPPING_ENTRY(0,0,INVALID)
    }
};

