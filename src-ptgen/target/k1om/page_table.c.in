/*
 * Copyright (c) 2017, ETH Zurich.
 * All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr. 6, CH-8092 Zurich.
 * Attn: Systems Group.
 *
 * THIS FILE IS AUTOMATICALLY GENERATED BY SOCKEYE: DO NOT EDIT!
 */

#include <stdint.h>
#include <barrelfish_kpi/types.h>
#include <barrelfish/static_assert.h>

#include <device_mapping.h>
#include <efi.h>


#define ARMV8_PAGE_GRANULE_64K (64*1024)
#define ARMV8_PAGE_GRANULE_16K (16*1024)
#define ARMV8_PAGE_GRANULE_4K (4*1024)

/* the number of tables */
#define ARMV8_PTABLES_NUM %u 

#define ARMV8_PAGE_GRANULE ARMV8_PAGE_GRANULE_4K


#if ARMV8_PAGE_GRANULE == ARMV8_PAGE_GRANULE_4K
/* ==========================================================================
    4KB Granule

    Level 0 - 512 Entries to Level 1
    Level 1 - 512 Entries to Level 2 or 1GB frames
    Level 2 - 512 Entries to Level 3 or 2MB frames
    Level 3 - 512 Entries to 4kb frames

    m = 12
=========================================================================== */


#define ARMV8_PTABLE_ALIGNMENT 4096
#define ARMV8_PTABLE_ENTRIES 512
#define ARMV8_PTABLE_MASK 0x3ff

#define ARMV8_PTABLE_ENTRY_FLAGS 0x3
#define ARMV8_PTABLE_BASE(addr) (((uint64_t)((const char *const)(addr)-(-3))))

#define ARMV8_L0_BASE (%u)
#define ARMV8_L1_BASE(idx) ((ARMV8_L0_BASE + idx * ARMV8_PAGE_GRANULE) >> 12)
#define ARMV8_L2_BASE(idx) ((ARMV8_L0_BASE + idx * ARMV8_PAGE_GRANULE) >> 12)
#define ARMV8_L3_BASE(idx) ((ARMV8_L0_BASE + idx * ARMV8_PAGE_GRANULE) >> 12)


/* ------------------------------------------------------------------------ */

union armv8_tdesc_l0
{
    struct {
        uint64_t present  : 1;  // 0
        uint64_t table    : 1;  // 1
        uint64_t ignored1 : 10; // 11-2
        uint64_t l1addr   : 36; // 47-m for m = 12
        uint64_t res0     : 4;  // 51-48
        uint64_t ignored2 : 7;  // 58-52
        uint64_t pxntable : 1;  // 59
        uint64_t xntable  : 1;  // 60
        uint64_t aptable  : 2;  // 62-61
        uint64_t nstable  : 1;  // 63
    } table;
    uint64_t raw;
};

STATIC_ASSERT(sizeof(union armv8_tdesc_l0) == 8, "Entry Size Mismatch!");

typedef const union armv8_tdesc_l0 armv8_ptable_l0_t [ARMV8_PTABLE_ENTRIES];

#define ARMV8_L0_TABLE_INDEX(va) (ARMV8_PTABLE_MASK & (((uint64_t)(va)) >> 39))

#define ARMV8_L0_ENTRY_INVALID (union armv8_tdesc_l0){.raw = 0}
#define ARMV8_L0_TABLE_ENTRY_REL(pa)  (union armv8_tdesc_l0){.raw = ARMV8_PTABLE_BASE(pa)}
#define ARMV8_L0_TABLE_ENTRY_FIX(idx) (union armv8_tdesc_l0){.table = {   \
        .present  = 1,                                                \
        .table    = 1,                                                \
        .ignored1 = 0,                                                \
        .l1addr   = ARMV8_L1_BASE(idx),                               \
        .res0     = 0,                                                \
        .ignored2 = 0,                                                \
        .pxntable = 0,                                                \
        .xntable  = 0,                                                \
        .aptable  = 0,                                                \
        .nstable  = 0, }}

/* ------------------------------------------------------------------------ */

union armv8_tdesc_l1
{
    struct {
        uint64_t present  : 1;  // 0
        uint64_t table    : 1;  // 1
        uint64_t ignored1 : 10; // 11-2
        uint64_t l1addr   : 36; // 47-m for m = 12
        uint64_t res0     : 4;  // 51-48
        uint64_t ignored2 : 7;  // 58-52
        uint64_t pxntable : 1;  // 59
        uint64_t xntable  : 1;  // 60
        uint64_t aptable  : 2;  // 62-61
        uint64_t nstable  : 1;  // 63
    } table;
    struct {
        uint64_t present  : 1;  // 0
        uint64_t table    : 1;  // 1 must be 0
        uint64_t attr_low : 10; // 11-2
        uint64_t res0     : 4;  // 15 - 12
        uint64_t nT       : 1;  // 16
        uint64_t res00    : 13; // n-1 -17
        uint64_t addr     : 18; // 47-n for n = 30
        uint64_t attr_hi  : 13; // 63-52
    } page1G;
    uint64_t raw;
};


/* IGN | UXN | PXN | Contiguous | DBM */
#define ARMV8_DEVICE_ENTRY_ATTR_HI ((0x1 << 3) | (0x1 << 2))
#define ARMV8_MEMORY_ENTRY_ATTR_HI 0

/* nG | AF | SH | AP | NS | AttrIndx
   1     1   11   00 | 1  | 0
 */
#define ARMV8_DEVICE_ENTRY_ATTR_LOW ((1U<<9) | (1U << 8) | (0x2U << 6) | (0U << 4) | (1U << 3) | 0x1)
#define ARMV8_MEMORY_ENTRY_ATTR_LOW ((1U<<9) | (1U << 8) | (0x3U << 6) | (0U << 4) | (1U << 3) | 0x0)


typedef const union armv8_tdesc_l1 armv8_ptable_l1_t [ARMV8_PTABLE_ENTRIES];

#define ARMV8_L1_TABLE_INDEX(va) (ARMV8_PTABLE_MASK & (((uint64_t)(uintptr_t)(va)) >> 30))
#define ARMV8_L1_TABLE_ENTRY_BASE(addr) (((uint64_t)(uintptr_t)addr) >> 30)

#define ARMV8_L1_ENTRY_INVALID (union armv8_tdesc_l1){.raw = 0}
#define ARMV8_L1_TABLE_ENTRY_REL(pa)  (union armv8_tdesc_l1){.raw = ARMV8_PTABLE_BASE(pa)}
#define ARMV8_L1_TABLE_ENTRY_FIX(idx0) (union armv8_tdesc_l1){.table = {   \
        .present  = 1,                                                \
        .table    = 1,                                                \
        .ignored1 = 0,                                                \
        .l1addr   = ARMV8_L2_BASE(idx0),                              \
        .res0     = 0,                                                \
        .ignored2 = 0,                                                \
        .pxntable = 0,                                                \
        .xntable  = 0,                                                \
        .aptable  = 0,                                                \
        .nstable  = 0 }}


#define ARMV8_L1_DEVICE_ENTRY(pa)  (union armv8_tdesc_l1){.page1G = {   \
        .present  = 1,                                                   \
        .table    = 0,                                                   \
        .attr_low = ARMV8_DEVICE_ENTRY_ATTR_LOW,                         \
        .res0     = 0,                                                   \
        .nT       = 0,                                                   \
        .res00    = 0,                                                   \
        .addr     = ARMV8_L1_TABLE_ENTRY_BASE(pa),                       \
        .attr_hi  = ARMV8_DEVICE_ENTRY_ATTR_HI }}

#define ARMV8_L1_MEMORY_ENTRY(pa)  (union armv8_tdesc_l1){.page1G = {   \
        .present  = 1,                                                   \
        .table    = 0,                                                   \
        .attr_low = ARMV8_MEMORY_ENTRY_ATTR_LOW,                         \
        .res0     = 0,                                                   \
        .nT       = 0,                                                   \
        .res00    = 0,                                                   \
        .addr     = ARMV8_L1_TABLE_ENTRY_BASE(pa),                       \
        .attr_hi  = ARMV8_MEMORY_ENTRY_ATTR_HI }}

/* ------------------------------------------------------------------------ */

union armv8_tdesc_l2
{
    struct {
        uint64_t present  : 1;  // 0
        uint64_t table    : 1;  // 1
        uint64_t ignored1 : 10; // 11-2
        uint64_t l1addr   : 36; // 47-m for m = 12
        uint64_t res0     : 4;  // 51-48
        uint64_t ignored2 : 7;  // 58-52
        uint64_t pxntable : 1;  // 59
        uint64_t xntable  : 1;  // 60
        uint64_t aptable  : 2;  // 62-61
        uint64_t nstable  : 1;  // 63
    } table;
    struct {
        uint64_t present  : 1;  // 0
        uint64_t table    : 1;  // 1 must be 0
        uint64_t attr_low : 10; // 11-2
        uint64_t res0     : 4;  // 15 - 12
        uint64_t nT       : 1;  // 16
        uint64_t res00    : 4;  // n-1 -17
        uint64_t addr     : 27; // 47-n for n = 21
        uint64_t attr_hi  : 13; // 63-52
    } page2M;
    uint64_t raw;
};


typedef const union armv8_tdesc_l2 armv8_ptable_l2_t [ARMV8_PTABLE_ENTRIES];
#define ARMV8_L2_TABLE_INDEX(va) (ARMV8_PTABLE_MASK & (((uint64_t)(uintptr_t)(va)) >> 21))

#define ARMV8_L2_TABLE_ENTRY_BASE(addr) ((addr) >> 21)

#define ARMV8_L2_ENTRY_INVALID (union armv8_tdesc_l2){.raw = 0}

#define ARMV8_L2_TABLE_ENTRY_REL(pa)  (union armv8_tdesc_l2){.raw = ARMV8_PTABLE_BASE(pa)}
#define ARMV8_L2_TABLE_ENTRY_FIX(idx) (union armv8_tdesc_l2){.table = {   \
        .present  = 1,                                                \
        .table    = 1,                                                \
        .ignored1 = 0,                                                \
        .l1addr   = ARMV8_L3_BASE(idx),                               \
        .res0     = 0,                                                \
        .ignored2 = 0,                                                \
        .pxntable = 0,                                                \
        .xntable  = 0,                                                \
        .aptable  = 0,                                                \
        .nstable  = 0, }}

#define ARMV8_L2_DEVICE_ENTRY(pa)  (union armv8_tdesc_l2){.page2M = {   \
        .present  = 1,                                                   \
        .table    = 0,                                                   \
        .attr_low = ARMV8_DEVICE_ENTRY_ATTR_LOW,                         \
        .res0     = 0,                                                   \
        .nT       = 0,                                                   \
        .res00    = 0,                                                   \
        .addr     = ARMV8_L2_TABLE_ENTRY_BASE(pa),                       \
        .attr_hi  = ARMV8_DEVICE_ENTRY_ATTR_HI }}

#define ARMV8_L2_MEMORY_ENTRY(pa)  (union armv8_tdesc_l2){.page2M = {   \
        .present  = 1,                                                   \
        .table    = 0,                                                   \
        .attr_low = ARMV8_MEMORY_ENTRY_ATTR_LOW,                         \
        .res0     = 0,                                                   \
        .nT       = 0,                                                   \
        .res00    = 0,                                                   \
        .addr     = ARMV8_L2_TABLE_ENTRY_BASE(pa),                       \
        .attr_hi  = ARMV8_MEMORY_ENTRY_ATTR_HI }}


/* ------------------------------------------------------------------------ */

union armv8_tdesc_l3
{
    struct {
        uint64_t present : 1;  // 0
        uint64_t one     : 1;  // 1
        uint64_t attr_lo : 10; // 11-2
        uint64_t addr    : 36; // 47-12
        uint64_t res0    : 3;  // 50-48
        uint64_t attr_hi : 13; // 63-51
    } page4k;
    uint64_t raw;
};


typedef union armv8_tdesc_l3 armv8_ptable_l3_t [ARMV8_PTABLE_ENTRIES];


#define ARMV8_L3_TABLE_ENTRY_BASE(addr) ((addr) >> 12)

#define ARMV8_L3_TABLE_INDEX(va) (ARMV8_PTABLE_MASK & (((uint64_t)(uintptr_t)(va)) >> 12))

#define ARMV8_L3_ENTRY_INVALID (union armv8_tdesc_l3){.raw = 0}
#define ARMv8_L3_DEVICE_ENTRY(pa) {}
#define ARMv8_L3_MEMORY_ENTRY(pa) {}


#define ARMV8_L3_DEVICE_ENTRY(pa)  (union armv8_tdesc_l3){.page4k = {    \
        .present  = 1,                                                   \
        .one      = 1,                                                   \
        .attr_lo  = ARMV8_DEVICE_ENTRY_ATTR_LOW,                         \
        .addr     = ARMV8_L3_TABLE_ENTRY_BASE(pa),                       \
        .res0     = 0,                                                   \
        .attr_hi  = ARMV8_DEVICE_ENTRY_ATTR_HI }}

#define ARMV8_L3_MEMORY_ENTRY(pa)  (union armv8_tdesc_l3){.page4k = {    \
        .present  = 1,                                                   \
        .one      = 1,                                                   \
        .attr_lo  = ARMV8_MEMORY_ENTRY_ATTR_LOW,                         \
        .addr     = ARMV8_L3_TABLE_ENTRY_BASE(pa),                       \
        .res0     = 0,                                                   \
        .attr_hi  = ARMV8_MEMORY_ENTRY_ATTR_HI }}



#elif ARMV8_PAGE_GRANULE == ARMV8_PAGE_GRANULE_16K

/* ==========================================================================
    Level 0 - 2048 Entries to Level 1
    Level 1 - 2048 Entries to Level 2
    Level 2 - 2048 Entries to Level 3 or 32MB frames
    Level 3 - 2048 Entries to 16kb frames

    m = 14
=========================================================================== */

union armv8_tdesc_l0
{
    struct {
        uint64_t present  : 1;  // 0
        uint64_t table    : 1;  // 1
        uint64_t ignored1 : 10; // 11-2
        uint64_t res0     : 2;  // m-1 - 12 for m = 14
        uint64_t l1addr   : 34; // 47-m for m 14
        uint64_t res00    : 4;  // 51-48
        uint64_t ignored2 : 7;  // 58-52
        uint64_t pxntable : 1;  // 59
        uint64_t xntable  : 1;  // 60
        uint64_t aptable  : 2;  // 62-61
        uint64_t nstable  : 1;  // 63
    } table;
    // no block mappings
    uint64_t raw;
}

union armv8_tdesc_l1
{
    struct {
        uint64_t present  : 1;  // 0
        uint64_t table    : 1;  // 1
        uint64_t ignored1 : 10; // 11-2
        uint64_t res0     : 2;  // m-1 - 12 for m = 14
        uint64_t l1addr   : 34; // 47-m for m 14
        uint64_t res00    : 4;  // 51-48
        uint64_t ignored2 : 7;  // 58-52
        uint64_t pxntable : 1;  // 59
        uint64_t xntable  : 1;  // 60
        uint64_t aptable  : 2;  // 62-61
        uint64_t nstable  : 1;  // 63
    } table;
    // no block mappigs
    uint64_t raw;
}


union armv8_tdesc_l2
{
    struct {
        uint64_t present  : 1;  // 0
        uint64_t table    : 1;  // 1
        uint64_t ignored1 : 10; // 11-2
        uint64_t res0     : 2;  // m-1 - 12 for m = 14
        uint64_t l1addr   : 34; // 47-m for m 14
        uint64_t res00    : 4;  // 51-48
        uint64_t ignored2 : 7;  // 58-52
        uint64_t pxntable : 1;  // 59
        uint64_t xntable  : 1;  // 60
        uint64_t aptable  : 2;  // 62-61
        uint64_t nstable  : 1;  // 63
    } table;
    struct {
        uint64_t present  : 1;  // 0
        uint64_t table    : 1;  // 1 must be 0
        uint64_t attr_low : 10; // 11-2
        uint64_t res0     : 4;  // 15 - 12
        uint64_t nT       : 1;  // 16
        uint64_t res00    : 8;  // n-1 -17
        uint64_t addr     : 23; // 47-n for n = 25
        uint64_t attr_hi  : 13; // 63-51
    } page32M;
    // no block mappings
    uint64_t raw;
}


union armv8_tdesc_l3
{
    struct {
        uint64_t present : 1;  // 0
        uint64_t one     : 1;  // 1
        uint64_t attr_lo : 10; // 11-2
        uint64_t zero    : 2;  // 13-12
        uint64_t addr    : 34; // 47-14
        uint64_t res0    : 3;  // 50-48
        uint64_t attr_hi : 13; // 63-51
    } page4k;
    uint64_t raw;
}


#define ARMV8_PTABLE_ALIGNMENT 16384

#define ARMV8_L0_ENTRY(pa) {0}
#define ARMV8_L1_ENTRY(pa) {0}
#define ARMV8_L2_ENTRY(pa) {0}
#define ARMV8_L3_ENTRY(pa) {0}
#define ARMv8_L3_DEVICE_ENTRY(pa) {}

#elif ARMV8_PAGE_GRANULE == ARMV8_PAGE_GRANULE_64K

/* ==========================================================================
    Level 1 - 8192 Entries to Level 2
    Level 2 - 8192 Entries to Level 3 or 512MB frames
    Level 3 - 8192 Entries to 64kb frames

    m = 16
=========================================================================== */

// no armv8_tdesc_l0

union armv8_tdesc_l1
{
    struct {
        uint64_t present  : 1;  // 0
        uint64_t table    : 1;  // 1
        uint64_t ignored1 : 10; // 11-2
        uint64_t res0     : 4;  //m-1 - 12
        uint64_t l1addr   : 32; // 47-m for m = 16
        uint64_t res00    : 4;  // 51-48
        uint64_t ignored2 : 7;  // 58-52
        uint64_t pxntable : 1;  // 59
        uint64_t xntable  : 1;  // 60
        uint64_t aptable  : 2;  // 62-61
        uint64_t nstable  : 1;  // 63
    } table;
    uint64_t raw;
}


union armv8_tdesc_l2
{
    struct {
        uint64_t present  : 1;  // 0
        uint64_t table    : 1;  // 1
        uint64_t ignored1 : 10; // 11-2
        uint64_t res0     : 4;  // m-1 - 12
        uint64_t l1addr   : 32; // 47-m for m =  16
        uint64_t res00    : 4;  // 51-48
        uint64_t ignored2 : 7;  // 58-52
        uint64_t pxntable : 1;  // 59
        uint64_t xntable  : 1;  // 60
        uint64_t aptable  : 2;  // 62-61
        uint64_t nstable  : 1;  // 63
    } table;
    struct {
        uint64_t present  : 1;  // 0
        uint64_t table    : 1;  // 1 must be 0
        uint64_t attr_low : 10; // 11-2
        uint64_t res0     : 4;  // 15 - 12
        uint64_t nT       : 1;  // 16
        uint64_t res00    : 4;  // n-1 -17
        uint64_t addr     : 27; // 47-n for n = 29
        uint64_t attr_hi  : 13; // 63-51
    } page512M;
    uint64_t raw;
}

union armv8_tdesc_l3
{
    struct {
        uint64_t present : 1;  // 0
        uint64_t one     : 1;  // 1
        uint64_t attr_lo : 10; // 11-2
        uint64_t ta      : 4;  // 15-12
        uint64_t addr    : 32; // 47-14
        uint64_t res0    : 3;  // 50-48
        uint64_t attr_hi : 13; // 63-51
    } page4k;
    uint64_t raw;
}

#define ARMV8_PTABLE_ALIGNMENT 65536

#define ARMV8_L0_ENTRY(pa) {0}
#define ARMV8_L1_ENTRY(pa) {0}
#define ARMV8_L2_ENTRY(pa) {0}
#define ARMV8_L3_ENTRY(pa) {0}
#define ARMv8_L3_DEVICE_ENTRY(pa) {}

#else
#error unknown granule
#endif


#if ARMV8_L0_BASE == 0
#define ARMV8_L0_TABLE_ENTRY(_idx) ARMV8_L0_TABLE_ENTRY_REL((&armv8_ptable[_idx]))
#define ARMV8_L1_TABLE_ENTRY(_idx0) ARMV8_L1_TABLE_ENTRY_REL((&armv8_ptable[_idx0]))
#define ARMV8_L2_TABLE_ENTRY(_idx0) ARMV8_L2_TABLE_ENTRY_REL((&armv8_ptable[_idx0]))
#else
#define ARMV8_L0_TABLE_ENTRY(_idx) ARMV8_L0_TABLE_ENTRY_FIX(_idx)
#define ARMV8_L1_TABLE_ENTRY(_idx0) ARMV8_L1_TABLE_ENTRY_FIX(_idx0)
#define ARMV8_L2_TABLE_ENTRY(_idx0) ARMV8_L2_TABLE_ENTRY_FIX(_idx0)
#endif


STATIC_ASSERT(sizeof(armv8_ptable_l3_t) == ARMV8_PAGE_GRANULE, "Check page-table entries");
STATIC_ASSERT(sizeof(armv8_ptable_l2_t) == ARMV8_PAGE_GRANULE, "Check page-table entries");
STATIC_ASSERT(sizeof(armv8_ptable_l1_t) == ARMV8_PAGE_GRANULE, "Check page-table entries");
STATIC_ASSERT(sizeof(armv8_ptable_l0_t) == ARMV8_PAGE_GRANULE, "Check page-table entries");

union armv8_ptable {
    armv8_ptable_l0_t l0;
    armv8_ptable_l1_t l1;
    armv8_ptable_l2_t l2;
    armv8_ptable_l3_t l3;
};

const union armv8_ptable  armv8_ptable[ARMV8_PTABLES_NUM]
    __attribute__((aligned(ARMV8_PTABLE_ALIGNMENT), section(".pagetables"))) =
{
    %s
};

extern uint64_t __pagetables_end;
extern uint64_t __pagetables_start;

struct device_mappings device_mappings
__attribute__((aligned(ARMV8_PTABLE_ALIGNMENT), section(".devmappings.maps"))) =
{
    .magic = DEVICE_MAPPINGS_MAGIC,
    .count = %u,
    .ptflags = ARMV8_PTABLE_ENTRY_FLAGS,
    .ptroot = (uint64_t)&__pagetables_start,
    .ptend = (uint64_t)(&__pagetables_end),
    .mappings = {
        %s
        DEVICE_MAPPING_ENTRY(0,0,INVALID)
    }
};


#define EFI_MMAP_ENTRY(t, p, pa, va, npgs, attr)    \
    (efi_memory_descriptor) {                       \
        .Type = (t),                                \
        .Pad = (p),                                 \
        .PhysicalStart = (pa),                      \
        .VirtualStart = (va),                       \
        .NumberOfPages = ((npgs)),                  \
        .Attribute = (attr)                         \
    }

efi_memory_descriptor efi_mmap[]
__attribute__((aligned(ARMV8_PTABLE_ALIGNMENT), section(".devmappings.efimmap"))) =
{
    %s
    EFI_MMAP_ENTRY(EfiBarrelfishCPUDriver, 0, 0, 0, 0, EFI_MEMORY_WP),
    EFI_MMAP_ENTRY(EfiBarrelfishCPUDriverStack, 0, 0, 0, 0, EFI_MEMORY_WP),
    EFI_MMAP_ENTRY(EfiBarrelfishMultibootData, 0, 0, 0, 0, EFI_MEMORY_WP),
    EFI_MMAP_ENTRY(EfiBarrelfishCoreData, 0, 0, 0, 0, EFI_MEMORY_WP),
    EFI_MMAP_ENTRY(EfiBarrelfishBootPageTable, 0, (uint64_t)&armv8_ptable, 0, ARMV8_PTABLES_NUM * ARMV8_PAGE_GRANULE, EFI_MEMORY_XP) 
};
