/*
 * Copyright (c) 2019 ETH Zurich.
 * All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * ETH Zurich D-INFK, Universitaetsstrasse 6, CH-8092 Zurich. Attn: Systems Group.
 *
 * THIS FILE IS AUTOMATICALLY GENERATED BY SOCKEYE: DO NOT EDIT!
 */

#include <kernel.h>


/* the platform string */
const char *platform_string = %s;

/*
 * ----------------------------------------------------------------------------
 * GIC
 * ----------------------------------------------------------------------------
 */

lpaddr_t platform_gic_distributor_base   = %s;
lpaddr_t platform_gic_redistributor_base = %s;

/*
 * ----------------------------------------------------------------------------
 * UART
 * ----------------------------------------------------------------------------
 */

/* the maximum number of UARTS supported */
#define MAX_NUM_UARTS %u

/* the serial console port */
unsigned int serial_console_port = %u;

/* the debug console port */
unsigned int serial_debug_port = %u;

/* the number of physical ports */
unsigned serial_num_physical_ports = %u;

/* uart bases */
const lpaddr_t
platform_uart_base[MAX_NUM_UARTS]= {
    %s
};

/* uart sizes */
const size_t
platform_uart_size[MAX_NUM_UARTS]= {
    %s
};


/*
 * ----------------------------------------------------------------------------
 * Address Translation
 * ----------------------------------------------------------------------------
 */

/**
 * Checks whether absolute local physical address `addr` is valid.
 * \param addr Absolute local physical address
 * \return True iff addr is a valid local physical address
 */
bool local_phys_is_valid(lpaddr_t arg)
{

%s

    return false;
}

lvaddr_t local_phys_to_mem(lpaddr_t arg)
{

%s

    return LVADDR_INVALID;
}

lpaddr_t mem_to_local_phys(lvaddr_t arg)
{

%s

    return LPADDR_INVALID;
}


lpaddr_t global_name_to_local_phys(gname_t arg)
{
    
%s

    return LPADDR_INVALID;
}

gname_t local_phys_to_global_name(lpaddr_t arg)
{
    
%s

    return NULL_GNAME;
}
