/*
 * Soc2 version of the x86 64 pc. should at some point replace the old
 *
 */
module IOMMU {
    input memory (0 bits 40) IN
    output memory (0 bits 40) OUT
    IN overlays OUT
}

// Instantiate this module for a vanilla PCI device
module PCI {
    input memory (0 bits 40) IN
    IN overlays PHYS

    memory (0 bits 40) PHYS
    PHYS accepts [        // The bar AS
        (0 bits 40)
    ]

    output memory (0 bits 40) OUT           // Addresses issued by device
}

// Instantiate this module for a IOMMU protected PCI device
module PCI_IOMMU {
    input memory (0 bits 40) IN
    IN overlays PCI0.IN

    output memory (0 bits 40) OUT

    instance PCI0 of PCI
    PCI0 instantiates PCI

    instance IOMMU0 of IOMMU
    IOMMU0 instantiates IOMMU

    PCI0 binds [
        OUT to IOMMU0.IN
    ]

    IOMMU0 binds [
        OUT to OUT
    ]
}

module PROC {
   output memory (0 bits 40) OUT //Virtual address bits
}

module MMU {
    input memory (0 bits 40) IN
    output memory (0 bits 40) OUT
    //IN maps [
    //    (0x000000 to 0xffffff) to OUT at (0x000000 to 0xffffff)
    //]
}

module PROC_MMU {
    output memory (0 bits 40) OUT

    instance PROC0 of PROC
    PROC0 instantiates PROC

    instance MMU0 of MMU
    MMU0 instantiates MMU

    PROC0 binds [
        OUT to MMU0.IN
    ]

    MMU0 binds [
        OUT to OUT
    ]
}

module SYSTEM {
    memory (0 bits 40) SYSBUS
    SYSBUS accepts [(0 to 0x200000000)] // Do not change, it must match the default cap id

    memory (0 bits 40) PCIBUS
    PCIBUS overlays SYSBUS

    // Mappings from PCIBUS to PCI devices will be added dynamically
    
    // Adding processes and MMUs will be dynamically
    instance xphi of XEONPHI
    xphi instantiates XEONPHI

    SYSBUS maps [
        (0x1000000000 to 0x11ffffffff) to xphi.IN at (0x000000000 to 0x1ffffffff)
    ]
}


// This module must have the same signature as PCI
module XEONPHI {
    // BAR0 --> GDDR Aperture
    // BAR1 --> MMIO Aperture

    output memory (0 bits 40) OUT    // Addresses issued by device
    input memory (0 bits 40) IN      // Requests from the PCI bus to the device

    IN overlays PHYS

    // Generic Nodes

    memory (0 bits 40) GDDR0
    GDDR0 accepts [(0x000000000 to 0x0fedfffff) (mem)]

    memory (0 bits 40) GDDR1
    GDDR1 accepts [(0x0fee01000 to 0x1ffffffff) (mem)]

    memory (0 bits 40) SMPT_IN
    SMPT_IN overlays OUT // bits(34), SMPT remaps in 16GB blocks

    memory (0 bits 16) MMIO
    MMIO accepts [(0x0 to 0xfffff) (devreg)]

    memory (0 bits 40) PHYS
    PHYS maps [
        (0x0000000000 to 0x00fedfffff) to GDDR0 at (0x000000000 to 0x0fedfffff);
        (0x00fee01000 to 0x01ffffffff) to GDDR1 at (0x0fee01000 to 0x1ffffffff);
        (0x08007D0000 bits 16) to MMIO at (0 bits 16);
        (0x8000000000 to 0xffffffffff) to SMPT_IN at (0x0 to 0x7fffffffff) // 512GB
    ]


    // Description of one booting core
    memory (0 bits 40) LAPIC
    LAPIC accepts [(0 bits 12) (devreg)]

    memory (0 bits 40) K1OM_CORE
    K1OM_CORE maps [
        (0x0 to 0xfedfffff) to PHYS at (0x0 to 0xfedfffff); 
        (0xfee00000 bits 12) to LAPIC at (0 bits 12);
        (0x00fee01000 to 0xffffffffff) to PHYS at (0x00fee01000 to 0xffffffffff)
    ]

    // Desired view for the booting page table
    BOOT maps [
        (0x0 to 0xffffffffff) to K1OM_CORE at (0x0 to 0xffffffffff)
    ] 
}

// This module must have the same signature as PCI_IOMMU
module XEONPHI_IOMMU {
    output memory (0 bits 40) OUT

    input memory (0 bits 40) IN
    IN overlays PCI0.IN

    instance PCI0 of XEONPHI
    PCI0 instantiates XEONPHI

    instance IOMMU0 of IOMMU
    IOMMU0 instantiates IOMMU

    PCI0 binds [
        OUT to IOMMU0.IN
    ]

    IOMMU0 binds [
        OUT to OUT
    ]
}
